axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12),
legend.title = element_text(size=12, face="bold"),
legend.text = element_text(size = 12, face = "bold"),
panel.background = element_blank(), #remove grey background
legend.position= c(0.88,0.88)) + #Move ledgend position
guides(color=FALSE) +
annotation_custom(CPP_scalp,xmin = 30, xmax = 270, ymin = 4, ymax = 6.25) + #add the CPP scapl plot
geom_vline(xintercept=as.numeric(participant_level %>% select(RT_Left) %>% summarise(mean(RT_Left))), #add dashed verticle for RT
colour  = scales::hue_pal()(1), size=0.75,  linetype="dashed", alpha=0.75) +
geom_vline(xintercept=as.numeric(participant_level %>% select(RT_Right) %>% summarise(mean(RT_Right))),
colour  = scales::hue_pal()(2)[2], size=0.75,  linetype="dashed", alpha=0.75) +
geom_vline(xintercept=as.numeric(participant_level %>% select(CPPonset_LeftTarget) %>% summarise(mean(CPPonset_LeftTarget))),
colour  = scales::hue_pal()(1), size=0.75, alpha=0.75) +
geom_vline(xintercept=as.numeric(participant_level %>% select(CPPonset_RightTarget) %>% summarise(mean(CPPonset_RightTarget))),
colour  = scales::hue_pal()(2)[2], size=0.75, alpha=0.75) +
geom_hline(yintercept=0, alpha = 0.5) +
geom_vline(xintercept=0, alpha = 0.5) + #add black likes at 0 on x and y axis
scale_x_continuous(breaks = seq(-100, 900, 50)) + #increase the resolution of the axis ticks
scale_y_continuous(breaks = seq(0,6,1)) +
annotate("text", x = -75, y = 6, label = "[B]", size=6)
p_CPP
#N2c plot
ggplot(plotdata_Stim_locked_N2c, aes(x=Time, y=N2c, color=Hemifield,fill=Hemifield)) +
geom_line(size=1.4) + geom_ribbon(aes(ymin=N2c-ci, ymax=N2c+ci), alpha = 0.3, colour=NA) +
geom_hline(yintercept=0, alpha = 0.5) + geom_vline(xintercept=0, alpha = 0.5) +
coord_cartesian(ylim = c(-3, 0.5),  xlim = c(-100, 500)) +
xlab("Time") + ylab("N2c Amplitude (\u00b5V)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12)) +
theme(axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12)) +
theme(legend.title = element_text(size=11, face="bold")) +
theme(legend.text = element_text(size = 11, face = "bold")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
#N2i plot
ggplot(plotdata_Stim_locked_N2i, aes(x=Time, y=N2i, color=Hemifield,fill=Hemifield)) +
geom_line(size=1.4) + geom_ribbon(aes(ymin=N2i-ci, ymax=N2i+ci), alpha = 0.3, colour=NA) +
geom_hline(yintercept=0, alpha = 0.5) + geom_vline(xintercept=0, alpha = 0.5) +
coord_cartesian(ylim = c(-3, 0.5),  xlim = c(-100, 500)) +
xlab("Time") + ylab("N2i Amplitude (\u00b5V)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12)) +
theme(axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12)) +
theme(legend.title = element_text(size=11, face="bold")) +
theme(legend.text = element_text(size = 11, face = "bold")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
###################Plot N2c and N2i trace in the same plot #####################
plotdata_Stim_locked_N2i$Hemisphere<-rep("Ipsilateral",length(plotdata_Stim_locked_N2i[,1]))
names(plotdata_Stim_locked_N2i)[names(plotdata_Stim_locked_N2i)=="N2i"] <- "N2"
names(plotdata_Stim_locked_N2i)[names(plotdata_Stim_locked_N2i)=="N2i_norm"] <- "N2_norm"
plotdata_Stim_locked_N2c$Hemisphere<-rep("Contralateral",length(plotdata_Stim_locked_N2c[,1]))
names(plotdata_Stim_locked_N2c)[names(plotdata_Stim_locked_N2c)=="N2c"] <- "N2"
names(plotdata_Stim_locked_N2c)[names(plotdata_Stim_locked_N2c)=="N2c_norm"] <- "N2_norm"
plotdata_N2<-rbind(plotdata_Stim_locked_N2i,plotdata_Stim_locked_N2c)
p_N2<-ggplot(plotdata_N2, aes(x=Time, y=N2, color=Hemifield,fill=Hemifield, linetype=Hemisphere)) +
annotation_custom(N2_scalp2,xmin = 0, xmax = 230, ymin = -1.2, ymax = -2.72) + #add the scapl plot
geom_line(size=1) +
geom_ribbon(aes(ymin=N2-ci, ymax=N2+ci), alpha = 0.3, colour=NA) +
geom_hline(yintercept=0, alpha = 0.5) + geom_vline(xintercept=0, alpha = 0.5) +
coord_cartesian(ylim = c(-2.7, 0.45), xlim = c(-100, 500)) +
xlab("Time (ms)") + ylab("N2 Amplitude (\u00b5V)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12), #element_text(face="bold", angle=0,  size=12),
axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12),
legend.title = element_text(size=12, face="bold"),
legend.text = element_text(size = 12, face = "bold"),
panel.background = element_blank(), #remove grey background
legend.position= c(0.85,0.19)) + #Move ledgend position
guides(color=FALSE, fill=FALSE) +
theme(panel.margin = unit(1.5, "lines")) +
scale_x_continuous(breaks = seq(-100, 500, 100)) + #increase the resolution of the axis ticks
scale_y_continuous(breaks = seq(-2.7,1, 0.5)) +
annotate("text", x = -75, y = 0.45, label = "[C]", size=6)
p_N2
if (location=="Monash") {
data_Stim_locked_ERP <- read.csv("S:/R-MNHS-SPP/Bellgrove-data/4. Dan Newman/big_dots/master_matrix_R_Stim_locked_ERP.csv", header=FALSE)
ID <- read.table("S:/R-MNHS-SPP/Bellgrove-data/4. Dan Newman/big_dots/ID_vector_Stim_locked_ERP.csv", quote="\"")
} else if (location=="DansLaptop") {
data_Stim_locked_ERP <- read.csv("C:/Users/Dan/Documents/GitHub/big_dots/master_matrix_R_Stim_locked_ERP.csv", header=FALSE)
ID <- read.table("C:/Users/Dan/Documents/GitHub/big_dots/ID_vector_Stim_locked_ERP.csv", quote="\"")
} else setwd(("~"))
data_Stim_locked_ERP$ID<-data_Stim_locked_ERP[,1]
#Replace the participant numbers with IDs:
data_Stim_locked_ERP[,1]<-ID[,1]
#Remove the seperate ID vector now it has been included into data dataframe
rm(ID)
drops <- c("ID")
data_Stim_locked_ERP<-data_Stim_locked_ERP[,!(names(data_Stim_locked_ERP) %in% drops)]
#Merge with the RT, Accuracy, Hemifield data
data_Stim_locked_ERP<- data_Stim_locked_ERP %>% #Rename data columns:
rename(.,
ID=V1,
TotalTrialNumber=V2,
Trial=V3,
Time=V4,
CPP=V5,
N2c=V6,
N2i=V7)
#Grab the columns from data that I need to merge in
toMerge<-data %>% select(ID, Trial, Art_neg100_100PR, FixBreak_neg100_100PR, Hemifield, RT)
#Now merge them
data_Stim_locked_ERP<-data_Stim_locked_ERP %>%   merge(., toMerge, by = c("ID", "Trial"))
#Filter out artifacts
data_Stim_locked_ERP<- data_Stim_locked_ERP %>%
filter(!Art_neg100_100PR, !FixBreak_neg100_100PR) %>%
select(-Art_neg100_100PR, -FixBreak_neg100_100PR)
###########################################################################################################
#Plot Stimonse locked
detach("package:dplyr", unload=TRUE) #Detach dplyr as functions below use plyr
source("summarySE.R")
source("summarySEwithin.R") #function to calculate Std.Er of mean
source("normDataWithin.R")
plotdata_Stim_locked_CPP <- summarySEwithin(data_Stim_locked_ERP, measurevar="CPP", withinvars=c("Time", "Hemifield"), idvar="ID")
plotdata_Stim_locked_CPP$Time<-as.numeric(as.character(plotdata_Stim_locked_CPP$Time))
plotdata_Stim_locked_N2c <- summarySEwithin(data_Stim_locked_ERP, measurevar="N2c", withinvars=c("Time", "Hemifield"), idvar="ID")
plotdata_Stim_locked_N2c$Time<-as.numeric(as.character(plotdata_Stim_locked_N2c$Time))
plotdata_Stim_locked_N2i <- summarySEwithin(data_Stim_locked_ERP, measurevar="N2i", withinvars=c("Time", "Hemifield"), idvar="ID")
plotdata_Stim_locked_N2i$Time<-as.numeric(as.character(plotdata_Stim_locked_N2i$Time))
summary(plotdata_Stim_locked_CPP$Time)
lapply(required_packages, require, character.only = TRUE) # re-load all librarys no that I'm finished with dlyr
library(png)
library(grid)
#Read in .png and transform it to a raster grob
CPP_scalp <- rasterGrob(readPNG("CPP_scalp.png",native = T, info = T), interpolate=TRUE)
N2c_LeftTarget_scalp <- rasterGrob(readPNG("N2c_LeftTarget_scalp.png"), interpolate=TRUE)
N2c_RightTarget_scalp <- rasterGrob(readPNG("N2c_RightTarget_scalp.png"), interpolate=TRUE)
Alpha_scalp<- rasterGrob(readPNG("Alpha_scalp.png",native = T, info = T), interpolate=TRUE)
Beta_scalp<- rasterGrob(readPNG("Beta_scalp.png",native = T, info = T), interpolate=TRUE)
N2_scalp<- rasterGrob(readPNG("N2_scalp.png",native = T, info = T), interpolate=TRUE)
N2_scalp2<- rasterGrob(readPNG("N2_scalp2.png",native = T, info = T), interpolate=TRUE)
Paradigm<- rasterGrob(readPNG("Paradigm_v2.png",native = T, info = T), interpolate=TRUE)
participant_level_long<-participant_level %>%
select(ID, RT_Left, RT_Right, CPPonset_LeftTarget, CPPonset_RightTarget) %>%
gather(measure_type, data, -ID)
participant_level_long$Hemifield[participant_level_long$measure_type=="CPPonset_RightTarget"|
participant_level_long$measure_type=="RT_Right"] <- "Right"
participant_level_long$Hemifield[participant_level_long$measure_type=="CPPonset_LeftTarget"|
participant_level_long$measure_type=="RT_Left"] <- "Left"
participant_level_long$Measure[participant_level_long$measure_type=="CPPonset_RightTarget"|
participant_level_long$measure_type=="CPPonset_LeftTarget"] <- "CPP Onset"
participant_level_long$Measure[participant_level_long$measure_type=="RT_Right"|
participant_level_long$measure_type=="RT_Left"] <- "RT"
p_violin<-ggplot(participant_level_long, aes(measure_type, data, colour = Hemifield))  +
scale_y_continuous(limits = c(-100, 900)) +
geom_violin(aes(linetype = Measure), size=1) +
# geom_boxplot(aes(linetype = Measure), alpha=0.1, notch=T, notchwidth=0.75, width = 0.3) +
xlab("Target Hemifield") + ylab("Time (ms)") +
theme(  axis.title.x = element_blank(), #element_text(face="bold", size=12),
axis.text.x  =  element_blank(), #element_text(face="bold", angle=0,  size=12),
axis.ticks.x=element_blank(),
axis.title.y = element_text(face="bold", size=11, colour = "white"),
axis.text.y=element_text(angle=90, vjust=0.5, size=10, colour = "white"),
axis.ticks.y=element_blank(),
legend.title = element_text(size=12, face="bold"),
legend.text = element_text(size = 12, face = "bold"),
panel.background = element_blank(), #remove grey background
legend.position=c(0.9,0.22),  #Move ledgend position
axis.line = element_line(colour = "black")) +
guides(colour=FALSE) +
geom_hline(yintercept=0, alpha = 0.5) +
geom_hline(yintercept=as.numeric(participant_level %>% select(RT_Left) %>% summarise(mean(RT_Left))), #add dashed verticle for RT
colour  = scales::hue_pal()(1), size=0.75,  linetype="dashed", alpha=0.75) +
geom_hline(yintercept=as.numeric(participant_level %>% select(RT_Right) %>% summarise(mean(RT_Right))),
colour  = scales::hue_pal()(2)[2], size=0.75,  linetype="dashed", alpha=0.75) +
geom_hline(yintercept=as.numeric(participant_level %>% select(CPPonset_LeftTarget) %>% summarise(mean(CPPonset_LeftTarget))),
colour  = scales::hue_pal()(1), size=0.75, alpha=0.75) +
geom_hline(yintercept=as.numeric(participant_level %>% select(CPPonset_RightTarget) %>% summarise(mean(CPPonset_RightTarget))),
colour  = scales::hue_pal()(2)[2], size=0.75, alpha=0.75) +
stat_summary(fun.data="mean_se",  fun.args = list(mult=1),
geom="pointrange", color = "purple", size=0.5) +
coord_flip() +
annotate("text", x = 4.25, y = -75, label = "[A]", size=6)
p_CPP<-ggplot(plotdata_Stim_locked_CPP, aes(x=Time, y=CPP, color=Hemifield,fill=Hemifield)) +
geom_line(size=1) +
geom_ribbon(aes(ymin=CPP-ci, ymax=CPP+ci), alpha = 0.5, colour=NA) +
coord_cartesian(ylim = c(-0.1, 6),  xlim = c(-100, 900)) +
xlab("Time (ms)") + ylab("CPP Amplitude (\u00b5V)") + # \u00b5 makes the "u" symbol for 'micro'V
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12), #element_text(face="bold", angle=0,  size=12),
axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12),
legend.title = element_text(size=12, face="bold"),
legend.text = element_text(size = 12, face = "bold"),
panel.background = element_blank(), #remove grey background
legend.position= c(0.88,0.88)) + #Move ledgend position
guides(color=FALSE) +
annotation_custom(CPP_scalp,xmin = 30, xmax = 270, ymin = 4, ymax = 6.25) + #add the CPP scapl plot
geom_vline(xintercept=as.numeric(participant_level %>% select(RT_Left) %>% summarise(mean(RT_Left))), #add dashed verticle for RT
colour  = scales::hue_pal()(1), size=0.75,  linetype="dashed", alpha=0.75) +
geom_vline(xintercept=as.numeric(participant_level %>% select(RT_Right) %>% summarise(mean(RT_Right))),
colour  = scales::hue_pal()(2)[2], size=0.75,  linetype="dashed", alpha=0.75) +
geom_vline(xintercept=as.numeric(participant_level %>% select(CPPonset_LeftTarget) %>% summarise(mean(CPPonset_LeftTarget))),
colour  = scales::hue_pal()(1), size=0.75, alpha=0.75) +
geom_vline(xintercept=as.numeric(participant_level %>% select(CPPonset_RightTarget) %>% summarise(mean(CPPonset_RightTarget))),
colour  = scales::hue_pal()(2)[2], size=0.75, alpha=0.75) +
geom_hline(yintercept=0, alpha = 0.5) +
geom_vline(xintercept=0, alpha = 0.5) + #add black likes at 0 on x and y axis
scale_x_continuous(breaks = seq(-100, 900, 50)) + #increase the resolution of the axis ticks
scale_y_continuous(breaks = seq(0,6,1)) +
annotate("text", x = -75, y = 6, label = "[B]", size=6)
p_CPP
#N2c plot
ggplot(plotdata_Stim_locked_N2c, aes(x=Time, y=N2c, color=Hemifield,fill=Hemifield)) +
geom_line(size=1.4) + geom_ribbon(aes(ymin=N2c-ci, ymax=N2c+ci), alpha = 0.3, colour=NA) +
geom_hline(yintercept=0, alpha = 0.5) + geom_vline(xintercept=0, alpha = 0.5) +
coord_cartesian(ylim = c(-3, 0.5),  xlim = c(-100, 500)) +
xlab("Time") + ylab("N2c Amplitude (\u00b5V)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12)) +
theme(axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12)) +
theme(legend.title = element_text(size=11, face="bold")) +
theme(legend.text = element_text(size = 11, face = "bold")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
#N2i plot
ggplot(plotdata_Stim_locked_N2i, aes(x=Time, y=N2i, color=Hemifield,fill=Hemifield)) +
geom_line(size=1.4) + geom_ribbon(aes(ymin=N2i-ci, ymax=N2i+ci), alpha = 0.3, colour=NA) +
geom_hline(yintercept=0, alpha = 0.5) + geom_vline(xintercept=0, alpha = 0.5) +
coord_cartesian(ylim = c(-3, 0.5),  xlim = c(-100, 500)) +
xlab("Time") + ylab("N2i Amplitude (\u00b5V)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12)) +
theme(axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12)) +
theme(legend.title = element_text(size=11, face="bold")) +
theme(legend.text = element_text(size = 11, face = "bold")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
###################Plot N2c and N2i trace in the same plot #####################
plotdata_Stim_locked_N2i$Hemisphere<-rep("Ipsilateral",length(plotdata_Stim_locked_N2i[,1]))
names(plotdata_Stim_locked_N2i)[names(plotdata_Stim_locked_N2i)=="N2i"] <- "N2"
names(plotdata_Stim_locked_N2i)[names(plotdata_Stim_locked_N2i)=="N2i_norm"] <- "N2_norm"
plotdata_Stim_locked_N2c$Hemisphere<-rep("Contralateral",length(plotdata_Stim_locked_N2c[,1]))
names(plotdata_Stim_locked_N2c)[names(plotdata_Stim_locked_N2c)=="N2c"] <- "N2"
names(plotdata_Stim_locked_N2c)[names(plotdata_Stim_locked_N2c)=="N2c_norm"] <- "N2_norm"
plotdata_N2<-rbind(plotdata_Stim_locked_N2i,plotdata_Stim_locked_N2c)
p_N2<-ggplot(plotdata_N2, aes(x=Time, y=N2, color=Hemifield,fill=Hemifield, linetype=Hemisphere)) +
annotation_custom(N2_scalp2,xmin = 0, xmax = 230, ymin = -1.2, ymax = -2.72) + #add the scapl plot
geom_line(size=1) +
geom_ribbon(aes(ymin=N2-ci, ymax=N2+ci), alpha = 0.3, colour=NA) +
geom_hline(yintercept=0, alpha = 0.5) + geom_vline(xintercept=0, alpha = 0.5) +
coord_cartesian(ylim = c(-2.7, 0.45), xlim = c(-100, 500)) +
xlab("Time (ms)") + ylab("N2 Amplitude (\u00b5V)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12), #element_text(face="bold", angle=0,  size=12),
axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12),
legend.title = element_text(size=12, face="bold"),
legend.text = element_text(size = 12, face = "bold"),
panel.background = element_blank(), #remove grey background
legend.position= c(0.85,0.19)) + #Move ledgend position
guides(color=FALSE, fill=FALSE) +
theme(panel.margin = unit(1.5, "lines")) +
scale_x_continuous(breaks = seq(-100, 500, 100)) + #increase the resolution of the axis ticks
scale_y_continuous(breaks = seq(-2.7,1, 0.5)) +
annotate("text", x = -75, y = 0.45, label = "[C]", size=6)
p_N2
###########################################################################################################
###### Import trial sample level data Stim locked Beta
if (location=="Monash") {
data_Stim_locked_Beta <- read.csv("S:/R-MNHS-SPP/Bellgrove-data/4. Dan Newman/big_dots/master_matrix_R_Stim_locked_beta.csv", header=FALSE)
ID <- read.table("S:/R-MNHS-SPP/Bellgrove-data/4. Dan Newman/big_dots/ID_vector_Stim_locked_beta.csv", quote="\"")
} else if (location=="DansLaptop") {
data_Stim_locked_Beta <- read.csv("C:/Users/Dan/Documents/GitHub/big_dots/master_matrix_R_Stim_locked_beta.csv", header=FALSE)
ID <- read.table("C:/Users/Dan/Documents/GitHub/big_dots/ID_vector_Stim_locked_beta.csv", quote="\"")
} else setwd(("~"))
data_Stim_locked_Beta$ID<-data_Stim_locked_Beta[,1]
#Replace the participant numbers with IDs:
data_Stim_locked_Beta[,1]<-ID[,1]
#Remove the seperate ID vector now it has been included into data dataframe
rm(ID)
drops <- c("ID")
data_Stim_locked_Beta<-data_Stim_locked_Beta[,!(names(data_Stim_locked_Beta) %in% drops)]
#Merge with the RT, Accuracy, Hemifield data
data_Stim_locked_Beta<- data_Stim_locked_Beta %>% #Rename data columns:
rename(.,
ID=V1,
TotalTrialNumber=V2,
Trial=V3,
Time=V4,
Stim_locked_Beta=V5) %>%
merge(., data, by = c("ID", "Trial", "TotalTrialNumber"))
#Filter out artifacts
data_Stim_locked_Beta<- data_Stim_locked_Beta %>% filter(!Art_neg100_100PR, !FixBreak_neg100_100PR)
###########################################################################################################
#Plot Stimonse locked
detach("package:dplyr", unload=TRUE) #Detach dplyr as functions below use plyr
source("summarySE.R")
source("summarySEwithin.R") #function to calculate Std.Er of mean
source("normDataWithin.R")
plotdata_Stim_locked_Beta <- summarySEwithin(data_Stim_locked_Beta, measurevar="Stim_locked_Beta", withinvars=c("Time", "Hemifield"), idvar="ID")
plotdata_Stim_locked_Beta$Time<-as.numeric(as.character(plotdata_Stim_locked_Beta$Time))
summary(plotdata_Stim_locked_Beta$Time)
lapply(required_packages, require, character.only = TRUE) # re-load all librarys no that I'm finished with dlyr
#Stim_locked_Beta Group on same plot
p_Beta<-ggplot(plotdata_Stim_locked_Beta, aes(x=Time, y=Stim_locked_Beta, color=Hemifield,fill=Hemifield)) +
annotation_custom(Beta_scalp,xmin = 200, xmax = 800, ymin = -0.04, ymax = -0.001) + #add the scapl plot
geom_line(size=1) +
geom_ribbon(aes(ymin=Stim_locked_Beta-ci, ymax=Stim_locked_Beta+ci), alpha = 0.3, colour=NA) +
geom_hline(yintercept=0, alpha = 0.5) + geom_vline(xintercept=0, alpha = 0.5) +
coord_cartesian(ylim = c(-0.1, 0.01),  xlim = c(-100, 800)) +
xlab("Time") + ylab("Beta Power (\u00b5V)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12), #element_text(face="bold", angle=0,  size=12),
axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(face="bold", angle=0, size=12),
panel.background = element_blank(),
legend.position= c(0.35,0.19),
legend.title = element_text(size=12, face="bold"),
legend.text = element_text(size = 12, face = "bold")) +
annotate("text", x = -90, y = 0.01, label = "[D]", size=6)
p_Beta
##Calculate t_values for each of the rolling variables ability to predict log(RT) at each time point
plot_data<-data_Stim_locked_Beta %>%
group_by(Hemifield, Time) %>%
do(Beta_Amplitude = summary(lmer(log(RT) ~ Stim_locked_Beta + (1|ID) + (1|ITI), data = ., REML=F))$coefficients[2,3]) %>%
gather(., key, t_value, -Hemifield, -Time) %>%
mutate(t_value= as.double(t_value)) %>%
arrange(key)
plot_data <- plot_data %>% arrange(key)
ggplot(plot_data, aes(Time, t_value, colour=Hemifield)) + geom_line(size=1.4) +
geom_hline(yintercept=2, alpha = 0.5,  size=1.4) + geom_hline(yintercept=-2, alpha = 0.5,  size=1.4) + geom_vline(xintercept=0, alpha = 0.5,  size=1.4) +
coord_cartesian(ylim = c(-5, 8), xlim = c(-100, 800)) +
theme(axis.title.x = element_text(face="bold", size=14),
axis.text.x  = element_text(face="bold", angle=0,  size=14)) +
theme(axis.title.y = element_text(face="bold", size=14),
axis.text.y  = element_text(angle=0, vjust=0.5, size=14)) +
theme(plot.title = element_text(face="bold", size=16)) +
theme(strip.text.x = element_text(size = 13))
##Pull out mean beta amplitude measures from 300 - 500ms in stim locked beta
beta_participant_level<- data_Stim_locked_Beta %>%
filter(Time>300, Time<500) %>%
group_by(ID, Hemifield) %>%
summarise(Stim_locked_Beta=mean(Stim_locked_Beta)) %>%
spread(Hemifield, Stim_locked_Beta) %>%
select(Beta_LeftTarget = Left,
Beta_RightTarget = Right) %>%
mutate(Beta_Asym = (Beta_LeftTarget-Beta_RightTarget)/(Beta_LeftTarget+Beta_RightTarget)) %>%
ungroup()
#Merge with participant_level data.frame (note don't worry that it coerces ID from factor to character vector)
participant_level<-left_join(participant_level, beta_participant_level, by = "ID")
#Remove it to free up some memory
rm(data_Stim_locked_Beta)
###########################################################################################################
###### Import trial sample level data Resp locked Beta
if (location=="Monash") {
data_Resp_locked_Beta <- read.csv("S:/R-MNHS-SPP/Bellgrove-data/4. Dan Newman/big_dots/master_matrix_R_Resp_locked_beta.csv", header=FALSE)
ID <- read.table("S:/R-MNHS-SPP/Bellgrove-data/4. Dan Newman/big_dots/ID_vector_Resp_locked_beta.csv", quote="\"")
} else if (location=="DansLaptop") {
data_Stim_locked_Beta <- read.csv("C:/Users/Dan/Documents/GitHub/big_dots/master_matrix_R_Resp_locked_beta.csv", header=FALSE)
ID <- read.table("C:/Users/Dan/Documents/GitHub/big_dots/ID_vector_Resp_locked_beta.csv", quote="\"")
} else setwd(("~"))
data_Resp_locked_Beta$ID<-data_Resp_locked_Beta[,1]
#Replace the participant numbers with IDs:
data_Resp_locked_Beta[,1]<-ID[,1]
#Remove the seperate ID vector now it has been included into data dataframe
rm(ID)
drops <- c("ID")
data_Resp_locked_Beta<-data_Resp_locked_Beta[,!(names(data_Resp_locked_Beta) %in% drops)]
#Merge with the RT, Accuracy, Hemifield data
data_Resp_locked_Beta<- data_Resp_locked_Beta %>% #Rename data columns:
rename(.,
ID=V1,
TotalTrialNumber=V2,
Trial=V3,
Time=V4,
Resp_locked_Beta=V5,
Resp_locked_Beta_NOTbaselined=V6) %>%
merge(., data, by = c("ID", "Trial", "TotalTrialNumber"))
#Filter out artifacts
data_Resp_locked_Beta<- data_Resp_locked_Beta %>% filter(!Art_neg100_100PR)
###########################################################################################################
#Plot response locked
detach("package:dplyr", unload=TRUE) #Detach dplyr as functions below use plyr
source("summarySE.R")
source("summarySEwithin.R") #function to calculate Std.Er of mean
source("normDataWithin.R")
plotdata_Resp_locked_Beta <- summarySEwithin(data_Resp_locked_Beta, measurevar="Resp_locked_Beta", withinvars=c("Time", "Hemifield"), idvar="ID")
plotdata_Resp_locked_Beta_NOTbaselined <- summarySEwithin(data_Resp_locked_Beta, measurevar="Resp_locked_Beta_NOTbaselined", withinvars=c("Time", "Hemifield"), idvar="ID")
plotdata_Resp_locked_Beta$Time<-as.numeric(as.character(plotdata_Resp_locked_Beta$Time))
plotdata_Resp_locked_Beta_NOTbaselined$Time<-as.numeric(as.character(plotdata_Resp_locked_Beta_NOTbaselined$Time))
summary(plotdata_Resp_locked_Beta$Time)
lapply(required_packages, require, character.only = TRUE) # re-load all librarys now that I'm finished with plyr
#Resp_locked_Beta Group on same plot
ggplot(plotdata_Resp_locked_Beta, aes(x=Time, y=Resp_locked_Beta, color=Hemifield,fill=Hemifield)) +
geom_line(size=1.4) + geom_ribbon(aes(ymin=Resp_locked_Beta-ci, ymax=Resp_locked_Beta+ci), alpha = 0.3, colour=NA) +
geom_hline(yintercept=0, alpha = 0.5) + geom_vline(xintercept=0, alpha = 0.5) +
coord_cartesian(ylim = c(-0.104, 0.01),  xlim = c(-600, 100)) +
xlab("Time") + ylab("Beta Power (\u00b5V)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12)) +
theme(axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12)) +
theme(legend.title = element_text(size=11, face="bold")) +
theme(legend.text = element_text(size = 11, face = "bold")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
##Pull out mean beta amplitude measures from -300 to -50ms in Resp locked beta
beta_participant_level<- data_Resp_locked_Beta %>%
filter(Time>-300, Time<(-50)) %>%
group_by(ID, Hemifield) %>%
summarise( xyBar =mean(Time*Resp_locked_Beta),
xBar = mean(Time),
yBar = mean(Resp_locked_Beta),
x2Bar =mean(Time^2),
Resp_locked_Beta_Slope = (xyBar - xBar*yBar) / (x2Bar - xBar^2)) %>%
select(ID, Hemifield, Resp_locked_Beta_Slope) %>%
spread(Hemifield, Resp_locked_Beta_Slope) %>%
select(Beta_slope_LeftTarget = Left,
Beta_slope_RightTarget = Right) %>%
mutate(Beta_slope_Asym = (Beta_slope_LeftTarget-Beta_slope_RightTarget)/(Beta_slope_LeftTarget+Beta_slope_RightTarget))
#Merge with participant_level data.frame (note don't worry that it coerces ID from factor to character vector)
participant_level<-left_join(participant_level, beta_participant_level, by = "ID")
#Remove it to free up some memory
rm(data_Resp_locked_Beta)
ANOVA_data<- participant_level %>%
select(ID, PreAlpha_LeftHemi, PreAlpha_RightHemi) %>%
na.omit() %>%
gather(Hemisphere, dv, -ID)
p_Alpha<-ggplot(ANOVA_data, aes(Hemisphere, dv, colour = Hemisphere))  +
annotation_custom(Alpha_scalp,xmin = 1, xmax = 2, ymin = 3.5, ymax = 5) + #add the scapl plot
geom_violin() +
geom_boxplot(alpha=0.1) +
geom_point() +
xlab("Hemisphere") + ylab("Alpha Power (\u00b5V)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12),
axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(face="bold", angle=0, size=12),
panel.background = element_blank()) +
guides(colour=FALSE) +
scale_x_discrete(labels=c("Left", "Right")) +
annotate("text", x = 0.65, y = 5, label = "[B]", size=6)
p_Alpha
Paradigm2<-ggplot(data_frame(y=c(1,460,920), x=c(1,490,985)), aes(x, y))  +
annotation_custom(Paradigm, xmin = 0, xmax = 980, ymin = -19, ymax = 890) +
theme(axis.title.x = element_blank(),
axis.text.x  = element_blank(),
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank()) +
annotate("text", x = 140, y = 930, label = "[A]", size=6)
Paradigm2
# png("Figure 2.png", width = 10*600, height = 15*600,  units = "px", res = 600)
# source("multiplot.R")
# multiplot(p_violin,p_CPP,p_scatter_CPP,p_Beta,p_N2,p_Alpha,layout= matrix(c(1,2,2,3,3,5,5,1,2,2,4,4,6,6), nrow = 7, ncol = 2))
# dev.off()
# multiplot(p_violin,p_CPP,p_scatter_CPP,p_Beta,p_N2,p_Alpha,layout= matrix(c(1,2,2,3,3,5,5,1,2,2,4,4,6,6), nrow = 7, ncol = 2))
multiplot(p_violin,p_CPP,Paradigm2,p_Beta,p_N2,p_Alpha,layout= matrix(c(1,2,2,3,3,5,5,1,2,2,4,4,6,6), nrow = 7, ncol = 2))
multiplot(Paradigm2,p_Alpha,p_N2,p_Beta,p_violin,p_CPP, layout=  matrix(c(1,1,3,3,5,6,6,2,2,4,4,5,6,6), nrow = 7, ncol = 2))
png("Figure 1.png", width = 10*600, height = 7*600,  units = "px", res = 600)
source("multiplot.R")
multiplot(Paradigm2,p_Alpha,p_N2,p_Beta, layout=  matrix(c(1,1,3,3,2,2,4,4),  ncol = 2))
dev.off()
multiplot(Paradigm2,p_Alpha,p_N2,p_Beta, layout=  matrix(c(1,1,3,3,2,2,4,4),  ncol = 2))
png("Figure 2.png", width = 10*600, height = 6*600,  units = "px", res = 600)
source("multiplot.R")
multiplot(p_violin, p_CPP, layout=  matrix(c(1,2,2,1,2,2), ncol = 2))
dev.off()
multiplot(p_violin, p_CPP, layout=  matrix(c(1,2,2,1,2,2), ncol = 2))
p_scatter_CPP<-ggplot(participant_level, aes(x=RT_Asym, y=CPPonset_Asym)) +
geom_point(shape=1, size=2) +
geom_smooth(method=lm, se=FALSE, colour="black") + # Add linear regression line # Don't add shaded confidence region
xlab("RT Asymmetry") + ylab("CPP-onset Asymmetry") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.text.x  = element_text(face="bold", angle=0,  size=14), #element_text(face="bold", angle=0,  size=14),
axis.title.y = element_text(face="bold", size=14),
axis.text.y  = element_text(face="bold", angle=0, size=14),
panel.background = element_blank()) +
geom_hline(yintercept=0, alpha = 0.4) +
geom_vline(xintercept=0, alpha = 0.4) + #add black likes at 0 on x and y axis
annotate("text", x = -0.1, y = 0.40, label = "[C]", size=6)
p_scatter_CPP
p_scatter_Alpha<-ggplot(participant_level, aes(x=RT_Asym, y=PreAlphaAsym)) +
geom_point(shape=1, size=2) +
geom_smooth(method=lm, se=FALSE, colour="black") + # Add linear regression line # Don't add shaded confidence region
xlab("RT Asymmetry") + ylab("Pre-target Alpha Asymmetry") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.text.x  = element_text(face="bold", angle=0,  size=14), #element_text(face="bold", angle=0,  size=14),
axis.title.y = element_text(face="bold", size=14),
axis.text.y  = element_text(face="bold", angle=0, size=14),
panel.background = element_blank()) +
geom_hline(yintercept=0, alpha = 0.4) +
geom_vline(xintercept=0, alpha = 0.4) + #add black likes at 0 on x and y axis
annotate("text", x = -0.1, y = 0.35, label = "[A]", size=6)
p_scatter_Alpha
p_scatter_N2<-ggplot(participant_level, aes(x=RT_Asym, y=N2c_latency_Asym)) +
geom_point(shape=1, size=2) +
geom_smooth(method=lm, se=FALSE, colour="black") + # Add linear regression line # Don't add shaded confidence region
xlab("RT Asymmetry") + ylab("N2c-latency Asymmetry") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.text.x  = element_text(face="bold", angle=0,  size=14), #element_text(face="bold", angle=0,  size=14),
axis.title.y = element_text(face="bold", size=14),
axis.text.y  = element_text(face="bold", angle=0, size=14),
panel.background = element_blank()) +
geom_hline(yintercept=0, alpha = 0.4) +
geom_vline(xintercept=0, alpha = 0.4) + #add black likes at 0 on x and y axis
annotate("text", x = -0.1, y = 0.3, label = "[B]", size=6)
p_scatter_N2
png("Figure 3.png", width = 12*600, height = 4.3*600,  units = "px", res = 600)
source("multiplot.R")
multiplot(p_scatter_Alpha, p_scatter_N2, p_scatter_CPP, layout= matrix(c(1,2,3),nrow = 1, ncol = 3))
dev.off()
multiplot(p_scatter_Alpha, p_scatter_N2, p_scatter_CPP, layout= matrix(c(1,2,3),nrow = 1, ncol = 3))
